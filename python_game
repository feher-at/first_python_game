import sys, termios, tty, os, time

def getch():
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(sys.stdin.fileno())
        ch = sys.stdin.read(1)

    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    return ch

button_delay = 0.00001

def draw_game(map):
    
    for lists in map:
        for k in lists:
            if k == 2:
                print("$",end = "")
            elif k == 1:
                print("X",end = "")
            elif k ==0:
                print(" ",end="")
        print()
            
def find_player(map):
    x = 0
    y = 0
    for map_line in range(len(map)):
        for line in range(len(map[map_line])):
            if map[map_line][line] == 2:
                x = line
                y = map_line
    return x,y
def check_valid_move(map, x, y, move):
    if move == "s":
        y += 1
    elif move == "w":
        y -= 1
    elif move == "a":
        x-=1
    elif move == "d":
        x+=1
    print(y,x)
    
    return map[y][x] == 0
def modify_game(map,x,y,char):
    def modify_game(map,x,y,char):
    if char == "s":
        map[y][x] = 0
        y += 1
        map[y][x] = 2
    elif char == "w":
        map[y][x] = 0
        y -= 1
        map[y][x] = 2
    elif char == "a":
        map[y][x] = 0
        x-=1
        map[y][x] = 2
    elif char == "d":
        map[y][x] = 0
        x+=1
        map[y][x] = 2


def majd():
    while True:
        char = getch()
        (x, y) = find_player(the_map) 
        draw_game(the_map)
        if char == "q":
            exit()
        
        if check_valid_move(the_map, x, y, char):
            modify_game
        
        
the_map = [[1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
          [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1],
          [1,0,0,1,1,0,1,0,0,0,0,1,1,1,1,1,1,0,0,1],
          [1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1],
          [1,0,0,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,1],
          [1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1],
          [1,0,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1],
          [1,0,0,1,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,1],
          [1,0,0,1,0,1,0,0,0,1,0,0,0,0,1,0,1,0,0,1],
          [1,0,0,1,1,1,0,0,0,1,0,1,1,1,1,0,1,0,0,1],
          [1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,1],
          [1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1],
          [1,0,0,1,1,1,0,1,0,1,1,1,1,1,0,0,1,0,0,1],
          [1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1],
          [1,0,1,1,1,0,0,0,0,1,0,1,0,0,1,1,1,1,1,1],
          [1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,1],
          [1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1],
          [1,0,0,1,0,0,0,0,0,1,1,1,1,1,1,0,1,0,0,1],
          [1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1],
          [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1]]
      
        



        

draw_labirinth()
